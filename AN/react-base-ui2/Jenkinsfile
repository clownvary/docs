port = new Random().nextInt(5000 - 4000) + 4000
sourceBranch = env.gitlabBranch ?: env.gitlabSourceBranch
validBranches = [
  'master'
]

// set name of job
currentBuild.displayName = sourceBranch


node {
  gitlabCommitStatus {
    stage ('Checkout') {
      checkout scm
    }

    stage ('Install') {
      sh 'npm install --no-spin'
    }

    stage ('Lint:JS') {
      try {
        // sh 'npm run lint:checkstyle'
        sh 'npm run eslint'
      } catch(Exception e) {
        // possibly send email here, if master branch
        error 'Linting JS failed'
      } finally {
        // step([
        //   $class: 'CheckStylePublisher',
        //   canComputeNew: false,
        //   defaultEncoding: '',
        //   failedTotalAll: '0',
        //   healthy: '',
        //   pattern: 'eslint-checkstyle.xml',
        //   unHealthy: '0',
        //   unstableTotalAll: '0'
        // ])
      }
    }

     stage ('Lint:CSS') {
      try {
        // sh 'npm run stylelint'
        sh 'npm run stylelint'
      } catch(Exception e) {
        // possibly send email here, if master branch
        error 'Linting CSS failed'
      } finally {
        // step([
        //   $class: 'CheckStylePublisher',
        //   canComputeNew: false,
        //   defaultEncoding: '',
        //   failedTotalAll: '0',
        //   healthy: '',
        //   pattern: 'eslint-checkstyle.xml',
        //   unHealthy: '0',
        //   unstableTotalAll: '0'
        // ])
      }
    }

    stage ('Test') {
      try {
        sh "npm run test"
      } catch(Exception e) {
        error 'Testing failed'
      } finally {
        publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: false, reportDir: 'test/coverage/', reportFiles: 'index.html', reportName: 'Test Coverage Report'])

        step([
          $class: 'CoberturaPublisher',
          autoUpdateHealth: false,
          autoUpdateStability: false,
          coberturaReportFile: 'test/coverage/cobertura-coverage.xml',
          failUnhealthy: false,
          failUnstable: false,
          maxNumberOfBuilds: 0,
          onlyStable: false,
          sourceEncoding: 'ASCII',
          zoomCoverageChart: false
        ])
      }
    }

    stage('SonarQube') {
      try {
        script {
          if (sourceBranch == 'master') {
            def scannerHome = tool 'scanner3.3.0';
            withSonarQubeEnv('SonarQube') {
              sh "${scannerHome}/bin/sonar-scanner"
            }
          }
        }
      } catch(Exception ex) {
      }
    }

    stage ('Examples') {
      try {
        sh "npm run site"
      } catch(Exception e) {
        error 'Launching examples failed'
      }
    }
  }
}
