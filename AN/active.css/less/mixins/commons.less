//
// Common mixin
// --------------------------------------------------

.m-wrap(@width: 1024px) {
  margin: 0 auto;
}

/* LESS Mixin for CSS arrow
 *
 * Usage:
 * .m-arrow(size, color, direction, offset, border-size(optional), border-color(optional));
 *
 * 1. size: you can set pretty much whatever you want. Further tests required for em unit.
 * 2. color: sadly, no way to inherit. Use the same color as the background of your element.
 * 3. direction: the direction of the arrow (top, right, bottom, left).
 * 4. offset: the position on the side (20px, 50%, etc.).
 * 5. border-size (optional): you may have to set it 1px thinner than the actual border to smooth the rendering.
 * 6. border-color (optional): "inherit" as a default value.
 *
 *
 * Still many things to do and edge cases to fix.
 * It uses the :after pseudo-element to create the arrow. If there is a border, it uses the :before pseudo-element
 *
 * Changelog:
 * - now handles border
 * - "inherit" now supported as a @border-color value
 * - "inherit" now supported as a @color value as long as there is no border involved
 * - dramatically simplified the position
 * - drop-shadow enabled
 * - GitHub repo: https://github.com/HugoGiraudel/LESS-Mixin-for-CSS-arrows
 */

.m-arrow(
  @size,
  @color,
  @direction,
  @offset,
  @border-size: 0,
  @border-color: inherit) {
  position: relative;
  &:after,
  &:before {
    content: "";
    position: absolute;
    width: 0;
    height: 0;
  }
}

.m-arrow(@border1 : 10px, @border2 : 10px, @border3 : 0px, @border4 : 10px, @arrow-color : #ffffff){
    border-color: @arrow-color transparent;
    border-style: solid;
    border-width: @border1 @border2 @border3 @border4;
    height: 0px;
    width: 0px;
}

/*Creates a balanced arrows*/
.m-arrow--down(@size: 20px, @arrow-color) {
    .m-arrow(@size, @size, 0px, @size, @arrow-color);
}
.m-arrow--up(@size: 20px, @arrow-color) {
    .m-arrow(0px, @size, @size, @size, @arrow-color);
}
.m-arrow--left(@size: 20px, @arrow-color) {
    .m-arrow(@size, 0px, @size, @size, @arrow-color);
}
.m-arrow--right(@size: 20px, @arrow-color) {
    .m-arrow(@size, @size, @size, 0px, @arrow-color);
}
// .m-clearfix
//
// For modern browsers
// 1. The space content is one way to avoid an Opera bug when the
//    contenteditable attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of elements
//    that are clearfixed.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
// Source: http://nicolasgallagher.com/micro-clearfix-hack/

.m-clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// .for

.for(@i, @n) {
  .-each(@i)
}

.for(@n) when (isnumber(@n)) {
  .for(1, @n)
}

.for(@i, @n) when not (@i = @n) {
  .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

// ............................................................
// .for-each

.for(@array) when (default()) {
  .for-impl_(length(@array))
}

.for-impl_(@i) when (@i > 1) {
  .for-impl_((@i - 1))
}

.for-impl_(@i) when (@i > 0) {
  .-each(extract(@array, @i))
}

