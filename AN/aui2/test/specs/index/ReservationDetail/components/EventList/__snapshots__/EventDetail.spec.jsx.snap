// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`index -> ReservationDetail -> components -> EventDetail render component correctly 1`] = `
<EventDetail
  addQuestionList={Array []}
  allEventConfig={
    Immutable.Map {
      hideReservationCharges: false,
      hideNotesSection: false,
      hideChecklistItemsSection: false,
      hideCustomQuestionsSection: false,
    }
  }
  authorities={
    Array [
      Object {
        "authorityType": "display",
        "id": "newReservationHome",
        "name": "New Reservation Home",
      },
      Object {
        "authorityType": "display",
        "id": "bookingGrid",
        "name": "Booking Grid",
      },
      Object {
        "authorityType": "enabled",
        "id": "permitActions",
        "name": "Permit Actions",
      },
      Object {
        "authorityType": "display",
        "id": "resourceCalendar",
        "name": "Resource Calendar",
      },
      Object {
        "authorityType": "enabled",
        "id": "bookingGridIcon",
        "name": "Booking Grid Icon",
      },
      Object {
        "authorityType": "enabled",
        "id": "reserveActions",
        "name": "Reserve Actions",
      },
      Object {
        "authorityType": "enabled",
        "id": "changePermitStatus",
        "name": "Change Permit Status",
      },
      Object {
        "authorityType": "disabled",
        "id": "cancelPermit",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "disabled",
        "id": "modifyPaymentPlan",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "makePayment",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "disabled",
        "id": "refundCharges",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "refundDeposit",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "viewEmailPrintPermit",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "viewPrintAmendment",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "disabled",
        "id": "editEvent",
        "name": "Edit Event",
      },
      Object {
        "authorityType": "disabled",
        "id": "addEvent",
        "name": "Add Event",
      },
      Object {
        "authorityType": "disabled",
        "id": "deleteEvent",
        "name": "Delete Event",
      },
      Object {
        "authorityType": "display",
        "id": "addCharge",
        "name": "Add Charge",
      },
      Object {
        "authorityType": "hide",
        "id": "deleteCharge",
        "name": "Delete Charge",
      },
      Object {
        "authorityType": "hide",
        "id": "editCharge",
        "name": "Edit Charge",
      },
      Object {
        "authorityType": "enabled",
        "id": "editQuestion",
        "name": "Edit Question",
      },
      Object {
        "authorityType": "enabled",
        "id": "editWaiver",
        "name": "Edit Waiver",
      },
      Object {
        "authorityType": "disabled",
        "id": "editNote",
        "name": "Edit Note",
      },
      Object {
        "authorityType": "disabled",
        "id": "addCustomerQuestions",
        "name": "Add Customer Questions",
      },
      Object {
        "authorityType": "disabled",
        "id": "addWaivers",
        "name": "Add Waivers",
      },
      Object {
        "authorityType": "enabled",
        "id": "resetFees",
        "name": "Reset Fees",
      },
    ]
  }
  errorHighlight={true}
  errors={Array []}
  eventActionInformation={
    Object {
      "addCharge": Object {
        "systemBehaviorID": "addCharge",
      },
      "addEvent": Object {
        "systemBehaviorID": "addEvent",
      },
      "addQuestions": Object {
        "systemBehaviorID": "addCustomerQuestions",
      },
      "addWaivers": Object {
        "systemBehaviorID": "addWaivers",
      },
      "deleteCharge": Object {
        "systemBehaviorID": "deleteCharge",
      },
      "deleteEvent": Object {
        "systemBehaviorID": "deleteEvent",
      },
      "deleteQuestion": Object {
        "systemBehaviorID": "deleteQuestion",
      },
      "editCharge": Object {
        "systemBehaviorID": "editCharge",
      },
      "editEvent": Object {
        "systemBehaviorID": "editEvent",
      },
      "editNote": Object {
        "systemBehaviorID": "editNote",
      },
      "editQuestion": Object {
        "systemBehaviorID": "editQuestion",
      },
      "editWaiver": Object {
        "systemBehaviorID": "editWaiver",
      },
      "resetFees": Object {
        "systemBehaviorID": "resetFees",
      },
    }
  }
  eventDetail={
    Immutable.Map {
      isShow: Immutable.Map {
        event_1: true,
      },
    }
  }
  eventIndex="1"
  facility={
    Immutable.Map {
      allFacilities: Immutable.Map {
        event_1: Immutable.Map {
          eventFee: Immutable.Map {
            facilityFees: Immutable.List [
            ],
          },
        },
      },
    }
  }
  hasRequiredQuestion={true}
  initialData={
    Object {
      "permitLabel": "",
    }
  }
  isPermitUpdatingMode={false}
  isTrrigerCustomerSearch={false}
  noteList={
    Immutable.Map {
      allNotes: Immutable.Map {
        event_1: Immutable.Map {
        },
      },
    }
  }
  questions={Array []}
  rules={Array []}
  waiverList={
    Immutable.Map {
      allWaivers: Immutable.Map {
        event_1: Immutable.Map {
        },
      },
      data: Immutable.List [
      ],
    }
  }
>
  <div
    className="event-detail reservation-fee content-error"
  >
    <div
      className="permit-fee"
    >
      <div
        className="reservation-fee"
      >
        <FeeSection
          disabledResetFee={false}
          eventIndex="1"
          facilityFees={Array []}
          feeActionStatus={
            Object {
              "allowAddFee": true,
              "allowDeleteFee": true,
              "allowEditFee": true,
            }
          }
          fetchPermitFee={[Function]}
        />
      </div>
    </div>
    <div
      className="event-detail__question leftMargin"
    >
      <EventSurvey
        addQuestion={[Function]}
        addQuestionList={Array []}
        canDelete={true}
        disabledAddQuestions={false}
        eventIndex="1"
        hasRequiredQuestion={true}
        hideCustomQuestionsSection={false}
        questions={Array []}
        readOnly={false}
      >
        <AUISurvey
          addQuestion={[Function]}
          addQuestionList={Array []}
          canDelete={true}
          changeQuestion={[Function]}
          deleteQuestion={[Function]}
          disabledAddQuestions={false}
          questions={Array []}
          readOnly={false}
          showQuestions={false}
        >
          <div />
        </AUISurvey>
      </EventSurvey>
    </div>
    <div
      className="event-detail__waiver leftMargin"
    >
      <Waiver
        disabledAddWaivers={false}
        eventDetail={
          Immutable.Map {
            isShow: Immutable.Map {
              event_1: true,
            },
          }
        }
        eventIndex="1"
        loadAddableWaivers={[Function]}
        permitWording=""
        readOnly={false}
        waiver={
          Immutable.Map {
            allWaivers: Immutable.Map {
              event_1: Immutable.Map {
              },
            },
            data: Immutable.List [
            ],
          }
        }
      >
        <div />
      </Waiver>
    </div>
    <div
      className="event-detail__notes leftMargin"
    >
      <Notes
        eventIndex="1"
        immediate={true}
        notes={
          Immutable.Map {
          }
        }
        readOnly={false}
      >
        <div
          className="notes-section u-hidden"
        >
          <Collapse
            activeKey=""
            dataSource={Array []}
            multiple={true}
            onChange={[Function]}
            prefixCls="an-collapse"
          >
            <div
              className="an-collapse"
            >
              <Panel
                Header="Event Notes"
                headerButtonId="default"
                isActive={false}
                key="notes"
                onItemClick={[Function]}
                prefixCls="an-collapse"
              >
                <div
                  className="an-collapse-item"
                >
                  <a
                    aria-expanded={false}
                    className="an-collapse-item__header"
                    href="javascript:void(0)"
                    onClick={[Function]}
                    role="button"
                    tabIndex={0}
                  >
                    <div
                      onClick={[Function]}
                    >
                      Event Notes
                      <i
                        className="icon icon-chevron-down"
                        onClick={[Function]}
                        tabIndex={0}
                      />
                    </div>
                  </a>
                  <div
                    className="an-collapse-item__content"
                  >
                    <div
                      className="section-container"
                    >
                      <section>
                        <label
                          htmlFor="staffNote"
                        >
                          Staff Note
                        </label>
                        <textarea
                          className=""
                          disabled={false}
                          id="staffNote"
                          maxLength="20000"
                          name="staffNote"
                          onBlur={[Function]}
                          onChange={[Function]}
                        />
                      </section>
                      <section>
                        <label
                          htmlFor="customerNote"
                        >
                          Customer Note
                        </label>
                        <textarea
                          className=""
                          disabled={false}
                          id="customerNote"
                          maxLength="20000"
                          name="customerNote"
                          onBlur={[Function]}
                          onChange={[Function]}
                        />
                      </section>
                    </div>
                  </div>
                </div>
              </Panel>
            </div>
          </Collapse>
        </div>
      </Notes>
    </div>
  </div>
</EventDetail>
`;

exports[`index -> ReservationDetail -> components -> EventDetail render component correctly if no data 1`] = `
<EventDetail
  addQuestionList={Array []}
  allEventConfig={
    Immutable.Map {
      hideReservationCharges: true,
      hideNotesSection: true,
      hideChecklistItemsSection: true,
      hideCustomQuestionsSection: true,
    }
  }
  authorities={
    Array [
      Object {
        "authorityType": "display",
        "id": "newReservationHome",
        "name": "New Reservation Home",
      },
      Object {
        "authorityType": "display",
        "id": "bookingGrid",
        "name": "Booking Grid",
      },
      Object {
        "authorityType": "enabled",
        "id": "permitActions",
        "name": "Permit Actions",
      },
      Object {
        "authorityType": "display",
        "id": "resourceCalendar",
        "name": "Resource Calendar",
      },
      Object {
        "authorityType": "enabled",
        "id": "bookingGridIcon",
        "name": "Booking Grid Icon",
      },
      Object {
        "authorityType": "enabled",
        "id": "reserveActions",
        "name": "Reserve Actions",
      },
      Object {
        "authorityType": "enabled",
        "id": "changePermitStatus",
        "name": "Change Permit Status",
      },
      Object {
        "authorityType": "disabled",
        "id": "cancelPermit",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "disabled",
        "id": "modifyPaymentPlan",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "makePayment",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "disabled",
        "id": "refundCharges",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "refundDeposit",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "viewEmailPrintPermit",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "enabled",
        "id": "viewPrintAmendment",
        "name": "Cancel Permit",
      },
      Object {
        "authorityType": "disabled",
        "id": "editEvent",
        "name": "Edit Event",
      },
      Object {
        "authorityType": "disabled",
        "id": "addEvent",
        "name": "Add Event",
      },
      Object {
        "authorityType": "disabled",
        "id": "deleteEvent",
        "name": "Delete Event",
      },
      Object {
        "authorityType": "display",
        "id": "addCharge",
        "name": "Add Charge",
      },
      Object {
        "authorityType": "hide",
        "id": "deleteCharge",
        "name": "Delete Charge",
      },
      Object {
        "authorityType": "hide",
        "id": "editCharge",
        "name": "Edit Charge",
      },
      Object {
        "authorityType": "enabled",
        "id": "editQuestion",
        "name": "Edit Question",
      },
      Object {
        "authorityType": "enabled",
        "id": "editWaiver",
        "name": "Edit Waiver",
      },
      Object {
        "authorityType": "disabled",
        "id": "editNote",
        "name": "Edit Note",
      },
      Object {
        "authorityType": "disabled",
        "id": "addCustomerQuestions",
        "name": "Add Customer Questions",
      },
      Object {
        "authorityType": "disabled",
        "id": "addWaivers",
        "name": "Add Waivers",
      },
      Object {
        "authorityType": "enabled",
        "id": "resetFees",
        "name": "Reset Fees",
      },
    ]
  }
  errorHighlight={false}
  errors={Array []}
  eventActionInformation={
    Object {
      "addCharge": Object {
        "systemBehaviorID": "addCharge",
      },
      "addEvent": Object {
        "systemBehaviorID": "addEvent",
      },
      "addQuestions": Object {
        "systemBehaviorID": "addCustomerQuestions",
      },
      "addWaivers": Object {
        "systemBehaviorID": "addWaivers",
      },
      "deleteCharge": Object {
        "systemBehaviorID": "deleteCharge",
      },
      "deleteEvent": Object {
        "systemBehaviorID": "deleteEvent",
      },
      "deleteQuestion": Object {
        "systemBehaviorID": "deleteQuestion",
      },
      "editCharge": Object {
        "systemBehaviorID": "editCharge",
      },
      "editEvent": Object {
        "systemBehaviorID": "editEvent",
      },
      "editNote": Object {
        "systemBehaviorID": "editNote",
      },
      "editQuestion": Object {
        "systemBehaviorID": "editQuestion",
      },
      "editWaiver": Object {
        "systemBehaviorID": "editWaiver",
      },
      "resetFees": Object {
        "systemBehaviorID": "resetFees",
      },
    }
  }
  eventDetail={
    Immutable.Map {
      isShow: Immutable.Map {
        event_1: true,
      },
    }
  }
  eventIndex="2"
  facility={
    Immutable.Map {
      allFacilities: Immutable.Map {
        event_1: Immutable.Map {
          eventFee: Immutable.Map {
            facilityFees: Immutable.List [
            ],
          },
        },
      },
    }
  }
  hasRequiredQuestion={true}
  initialData={
    Object {
      "permitLabel": "",
    }
  }
  isPermitUpdatingMode={false}
  isTrrigerCustomerSearch={false}
  noteList={
    Immutable.Map {
      allNotes: Immutable.Map {
        event_1: Immutable.Map {
        },
      },
    }
  }
  questions={Array []}
  rules={Array []}
  waiverList={
    Immutable.Map {
      allWaivers: Immutable.Map {
        event_1: Immutable.Map {
        },
      },
      data: Immutable.List [
      ],
    }
  }
>
  <div
    className="event-detail u-hidden "
  >
    <div
      className="event-detail__question leftMargin"
    >
      <EventSurvey
        addQuestion={[Function]}
        addQuestionList={Array []}
        canDelete={true}
        disabledAddQuestions={false}
        eventIndex="2"
        hasRequiredQuestion={true}
        hideCustomQuestionsSection={true}
        questions={Array []}
        readOnly={false}
      >
        <AUISurvey
          addQuestion={[Function]}
          addQuestionList={Array []}
          canDelete={true}
          changeQuestion={[Function]}
          deleteQuestion={[Function]}
          disabledAddQuestions={false}
          questions={Array []}
          readOnly={false}
          showQuestions={false}
        >
          <div />
        </AUISurvey>
      </EventSurvey>
    </div>
  </div>
</EventDetail>
`;
